package com.carlos.challenge.infrastructure.in.web.controller;

import com.carlos.challenge.domain.model.PointOfSale;
import com.carlos.challenge.domain.port.in.PointOfSaleUseCasePort;
import com.carlos.challenge.infrastructure.in.web.dto.req.CreatePointRequest;
import com.carlos.challenge.infrastructure.in.web.dto.req.UpdatePointRequest;
import com.carlos.challenge.infrastructure.in.web.dto.resp.PointOfSaleResponse;
import com.carlos.challenge.infrastructure.in.web.mapper.PointOfSaleWebMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import java.net.URI;
import java.util.List;

@Tag(name = "Points of Sale", description = "Operations related to points of sale")
@RestController
@RequestMapping(value = "/api/pointsofsale", produces = MediaType.APPLICATION_JSON_VALUE)
@Validated
public class PointOfSaleController {

    private final PointOfSaleUseCasePort useCase;
    private final PointOfSaleWebMapper mapper;

    public PointOfSaleController(PointOfSaleUseCasePort useCase, PointOfSaleWebMapper mapper) {
        this.useCase = useCase;
        this.mapper = mapper;
    }

    @Operation(
            summary = "List all points of sale",
            description = "Returns a list of all points of sale.",
            security = @SecurityRequirement(name = "basicAuth")
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
    })
    @GetMapping
    @PreAuthorize("hasAnyRole('USER','ADMIN')")
    public ResponseEntity<List<PointOfSaleResponse>> list() {
        List<PointOfSaleResponse> body = useCase.findAll().stream()
                .map(mapper::toResponse)
                .toList();
        return ResponseEntity.ok(body);
    }

    @Operation(
            summary = "Create a new point of sale",
            description = """
                          Creates a new point of sale. The public ID is a UUID generated by the API.
                          If 'code' is provided, it will be used; otherwise it may be generated.""",
            security = @SecurityRequirement(name = "basicAuth"),
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "Point of sale creation request: requires 'name'. Optional 'code' (integer).",
                    required = true
            )
    )
    @ApiResponses({
            @ApiResponse(responseCode = "201", description = "Point of sale created"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
    })
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<PointOfSaleResponse> create(@Valid @org.springframework.web.bind.annotation.RequestBody CreatePointRequest request) {
        final PointOfSale saved = (request.code() == null)
                ? useCase.create(request.name())
                : useCase.create(request.name(), request.code());
        PointOfSaleResponse body = mapper.toResponse(saved);
        return ResponseEntity.created(URI.create("/api/pointsofsale/" + body.id())).body(body);
    }

    @Operation(
            summary = "Update a point of sale",
            description = "Updates the name of a point of sale by its Public ID (UUID). Requires ADMIN role.",
            security = @SecurityRequirement(name = "basicAuth"),
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "Point of sale update request (new name).",
                    required = true
            )
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Point of sale updated"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Point of sale not found")
    })
    @PutMapping(value = "/{id}", consumes = MediaType.APPLICATION_JSON_VALUE)
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<PointOfSaleResponse> update(
            @Parameter(description = "Point of sale Public ID (UUID)", required = true)
            @PathVariable String id,
            @Valid @org.springframework.web.bind.annotation.RequestBody UpdatePointRequest request) {
        PointOfSale updated = useCase.update(id, request.name());
        return ResponseEntity.ok(mapper.toResponse(updated));
    }

    @Operation(
            summary = "Delete a point of sale",
            description = "Deletes a point of sale by its Public ID (UUID). Requires ADMIN role.",
            security = @SecurityRequirement(name = "basicAuth")
    )
    @ApiResponses({
            @ApiResponse(responseCode = "204", description = "Point of sale deleted"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Point of sale not found")
    })
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> delete(
            @Parameter(description = "Point of sale Public ID (UUID)", required = true)
            @PathVariable String id) {
        useCase.delete(id);
        return ResponseEntity.noContent().build();
    }

    @Operation(
            summary = "Get a point of sale by ID",
            description = "Returns a point of sale by its Public ID (UUID).",
            security = @SecurityRequirement(name = "basicAuth")
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Point of sale not found")
    })
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('USER','ADMIN')")
    public ResponseEntity<PointOfSaleResponse> getById(
            @Parameter(description = "Point of sale Public ID (UUID)", required = true)
            @PathVariable String id) {
        return ResponseEntity.ok(mapper.toResponse(useCase.findById(id)));
    }

    @Operation(
            summary = "Get a point of sale by code",
            description = "Returns a point of sale by its numeric code (if present).",
            security = @SecurityRequirement(name = "basicAuth")
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Point of sale not found")
    })
    @GetMapping("/by-code/{code}")
    @PreAuthorize("hasAnyRole('USER','ADMIN')")
    public ResponseEntity<PointOfSaleResponse> getByCode(
            @Parameter(description = "Point of sale numeric code", required = true)
            @PathVariable Integer code) {
        return useCase.findByCode(code)
                .map(p -> ResponseEntity.ok(mapper.toResponse(p)))
                .orElse(ResponseEntity.notFound().build());
    }
}
